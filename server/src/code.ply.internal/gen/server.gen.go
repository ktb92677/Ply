// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// PostV1PlyEnrollmentJSONBody defines parameters for PostV1PlyEnrollment.
type PostV1PlyEnrollmentJSONBody struct {
	EnrollmentId *string `json:"enrollmentId,omitempty"`
	LocationId   *string `json:"locationId,omitempty"`
	Payer        *string `json:"payer,omitempty"`
	PracticeId   *string `json:"practiceId,omitempty"`
	ProviderId   *string `json:"providerId,omitempty"`
	State        *string `json:"state,omitempty"`
	Status       *string `json:"status,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// PostV1PlyEnrollmentEnrollmentIdJSONBody defines parameters for PostV1PlyEnrollmentEnrollmentId.
type PostV1PlyEnrollmentEnrollmentIdJSONBody struct {
	EnrollmentId *string `json:"enrollmentId,omitempty"`
	LocationId   *string `json:"locationId,omitempty"`
	Payer        *string `json:"payer,omitempty"`
	PracticeId   *string `json:"practiceId,omitempty"`
	ProviderId   *string `json:"providerId,omitempty"`
	State        *string `json:"state,omitempty"`
	Status       *string `json:"status,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// PostV1PlyLocationJSONBody defines parameters for PostV1PlyLocation.
type PostV1PlyLocationJSONBody struct {
	Address    *string `json:"address,omitempty"`
	LocationId *string `json:"locationId,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
}

// PostV1PlyLocationLocationIdJSONBody defines parameters for PostV1PlyLocationLocationId.
type PostV1PlyLocationLocationIdJSONBody struct {
	Address    *string `json:"address,omitempty"`
	LocationId *string `json:"locationId,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
}

// PostV1PlyPracticeJSONBody defines parameters for PostV1PlyPractice.
type PostV1PlyPracticeJSONBody struct {
	Ein        *string `json:"ein,omitempty"`
	Name       *string `json:"name,omitempty"`
	OwnerName  *string `json:"owner_name,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
}

// PostV1PlyPracticePracticeIdJSONBody defines parameters for PostV1PlyPracticePracticeId.
type PostV1PlyPracticePracticeIdJSONBody struct {
	Ein        *string `json:"ein,omitempty"`
	Name       *string `json:"name,omitempty"`
	OwnerName  *string `json:"owner_name,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
}

// PostV1PlyPracticePracticeIdUploadMultipartBody defines parameters for PostV1PlyPracticePracticeIdUpload.
type PostV1PlyPracticePracticeIdUploadMultipartBody struct {
	// File The document file to upload
	File openapi_types.File `json:"file"`

	// FileName The original name of the file being uploaded
	FileName string `json:"fileName"`
}

// PostV1PlyProviderJSONBody defines parameters for PostV1PlyProvider.
type PostV1PlyProviderJSONBody struct {
	Name       *string `json:"name,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
	ProviderId *string `json:"providerId,omitempty"`
	Ssn        *string `json:"ssn,omitempty"`
}

// PostV1PlyProviderProviderIdJSONBody defines parameters for PostV1PlyProviderProviderId.
type PostV1PlyProviderProviderIdJSONBody struct {
	Name       *string `json:"name,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
	ProviderId *string `json:"providerId,omitempty"`
	Ssn        *string `json:"ssn,omitempty"`
}

// PostV1PlyTaskTaskIdJSONBody defines parameters for PostV1PlyTaskTaskId.
type PostV1PlyTaskTaskIdJSONBody struct {
	Message    *string `json:"message,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
	Status     *string `json:"status,omitempty"`
	TaskId     *string `json:"taskId,omitempty"`
}

// PostV1PlyEnrollmentJSONRequestBody defines body for PostV1PlyEnrollment for application/json ContentType.
type PostV1PlyEnrollmentJSONRequestBody PostV1PlyEnrollmentJSONBody

// PostV1PlyEnrollmentEnrollmentIdJSONRequestBody defines body for PostV1PlyEnrollmentEnrollmentId for application/json ContentType.
type PostV1PlyEnrollmentEnrollmentIdJSONRequestBody PostV1PlyEnrollmentEnrollmentIdJSONBody

// PostV1PlyLocationJSONRequestBody defines body for PostV1PlyLocation for application/json ContentType.
type PostV1PlyLocationJSONRequestBody PostV1PlyLocationJSONBody

// PostV1PlyLocationLocationIdJSONRequestBody defines body for PostV1PlyLocationLocationId for application/json ContentType.
type PostV1PlyLocationLocationIdJSONRequestBody PostV1PlyLocationLocationIdJSONBody

// PostV1PlyPracticeJSONRequestBody defines body for PostV1PlyPractice for application/json ContentType.
type PostV1PlyPracticeJSONRequestBody PostV1PlyPracticeJSONBody

// PostV1PlyPracticePracticeIdJSONRequestBody defines body for PostV1PlyPracticePracticeId for application/json ContentType.
type PostV1PlyPracticePracticeIdJSONRequestBody PostV1PlyPracticePracticeIdJSONBody

// PostV1PlyPracticePracticeIdUploadMultipartRequestBody defines body for PostV1PlyPracticePracticeIdUpload for multipart/form-data ContentType.
type PostV1PlyPracticePracticeIdUploadMultipartRequestBody PostV1PlyPracticePracticeIdUploadMultipartBody

// PostV1PlyProviderJSONRequestBody defines body for PostV1PlyProvider for application/json ContentType.
type PostV1PlyProviderJSONRequestBody PostV1PlyProviderJSONBody

// PostV1PlyProviderProviderIdJSONRequestBody defines body for PostV1PlyProviderProviderId for application/json ContentType.
type PostV1PlyProviderProviderIdJSONRequestBody PostV1PlyProviderProviderIdJSONBody

// PostV1PlyTaskTaskIdJSONRequestBody defines body for PostV1PlyTaskTaskId for application/json ContentType.
type PostV1PlyTaskTaskIdJSONRequestBody PostV1PlyTaskTaskIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a document
	// (DELETE /v1/ply/document/{documentId})
	DeleteV1PlyDocumentDocumentId(w http.ResponseWriter, r *http.Request, documentId string)
	// Get a document by ID
	// (GET /v1/ply/document/{documentId})
	GetV1PlyDocumentDocumentId(w http.ResponseWriter, r *http.Request, documentId string)
	// Create an enrollment
	// (POST /v1/ply/enrollment)
	PostV1PlyEnrollment(w http.ResponseWriter, r *http.Request)
	// Delete a enrollment
	// (DELETE /v1/ply/enrollment/{enrollmentId})
	DeleteV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request, enrollmentId string)
	// Read a enrollment
	// (GET /v1/ply/enrollment/{enrollmentId})
	GetV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request, enrollmentId string)
	// Update a enrollment
	// (POST /v1/ply/enrollment/{enrollmentId})
	PostV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request, enrollmentId string)
	// List activities
	// (GET /v1/ply/enrollment/{enrollmentId}/activity)
	GetV1PlyEnrollmentEnrollmentIdActivity(w http.ResponseWriter, r *http.Request, enrollmentId string)
	// Create a location
	// (POST /v1/ply/location)
	PostV1PlyLocation(w http.ResponseWriter, r *http.Request)
	// Delete a location
	// (DELETE /v1/ply/location/{locationId})
	DeleteV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request, locationId string)
	// Read a location
	// (GET /v1/ply/location/{locationId})
	GetV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request, locationId string)
	// Update a location
	// (POST /v1/ply/location/{locationId})
	PostV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request, locationId string)
	// Create a practice
	// (POST /v1/ply/practice)
	PostV1PlyPractice(w http.ResponseWriter, r *http.Request)
	// List practices
	// (GET /v1/ply/practice/list)
	GetV1PlyPracticeList(w http.ResponseWriter, r *http.Request)
	// Read a practice
	// (GET /v1/ply/practice/{practiceId})
	GetV1PlyPracticePracticeId(w http.ResponseWriter, r *http.Request, practiceId string)
	// Update a practice
	// (POST /v1/ply/practice/{practiceId})
	PostV1PlyPracticePracticeId(w http.ResponseWriter, r *http.Request, practiceId string)
	// List documents
	// (GET /v1/ply/practice/{practiceId}/document)
	GetV1PlyPracticePracticeIdDocument(w http.ResponseWriter, r *http.Request, practiceId string)
	// List enrollments
	// (GET /v1/ply/practice/{practiceId}/enrollment)
	GetV1PlyPracticePracticeIdEnrollment(w http.ResponseWriter, r *http.Request, practiceId string)
	// List locations
	// (GET /v1/ply/practice/{practiceId}/location)
	GetV1PlyPracticePracticeIdLocation(w http.ResponseWriter, r *http.Request, practiceId string)
	// List providers
	// (GET /v1/ply/practice/{practiceId}/provider)
	GetV1PlyPracticePracticeIdProvider(w http.ResponseWriter, r *http.Request, practiceId string)
	// List tasks
	// (GET /v1/ply/practice/{practiceId}/task)
	GetV1PlyPracticePracticeIdTask(w http.ResponseWriter, r *http.Request, practiceId string)
	// Upload a document for a practice
	// (POST /v1/ply/practice/{practiceId}/upload)
	PostV1PlyPracticePracticeIdUpload(w http.ResponseWriter, r *http.Request, practiceId string)
	// Create a provider
	// (POST /v1/ply/provider)
	PostV1PlyProvider(w http.ResponseWriter, r *http.Request)
	// Delete a provider
	// (DELETE /v1/ply/provider/{providerId})
	DeleteV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request, providerId string)
	// Read a provider
	// (GET /v1/ply/provider/{providerId})
	GetV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request, providerId string)
	// Update a provider
	// (POST /v1/ply/provider/{providerId})
	PostV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request, providerId string)
	// Update a task
	// (POST /v1/ply/task/{taskId})
	PostV1PlyTaskTaskId(w http.ResponseWriter, r *http.Request, taskId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Delete a document
// (DELETE /v1/ply/document/{documentId})
func (_ Unimplemented) DeleteV1PlyDocumentDocumentId(w http.ResponseWriter, r *http.Request, documentId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a document by ID
// (GET /v1/ply/document/{documentId})
func (_ Unimplemented) GetV1PlyDocumentDocumentId(w http.ResponseWriter, r *http.Request, documentId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an enrollment
// (POST /v1/ply/enrollment)
func (_ Unimplemented) PostV1PlyEnrollment(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a enrollment
// (DELETE /v1/ply/enrollment/{enrollmentId})
func (_ Unimplemented) DeleteV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request, enrollmentId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read a enrollment
// (GET /v1/ply/enrollment/{enrollmentId})
func (_ Unimplemented) GetV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request, enrollmentId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a enrollment
// (POST /v1/ply/enrollment/{enrollmentId})
func (_ Unimplemented) PostV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request, enrollmentId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List activities
// (GET /v1/ply/enrollment/{enrollmentId}/activity)
func (_ Unimplemented) GetV1PlyEnrollmentEnrollmentIdActivity(w http.ResponseWriter, r *http.Request, enrollmentId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a location
// (POST /v1/ply/location)
func (_ Unimplemented) PostV1PlyLocation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a location
// (DELETE /v1/ply/location/{locationId})
func (_ Unimplemented) DeleteV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read a location
// (GET /v1/ply/location/{locationId})
func (_ Unimplemented) GetV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a location
// (POST /v1/ply/location/{locationId})
func (_ Unimplemented) PostV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a practice
// (POST /v1/ply/practice)
func (_ Unimplemented) PostV1PlyPractice(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List practices
// (GET /v1/ply/practice/list)
func (_ Unimplemented) GetV1PlyPracticeList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read a practice
// (GET /v1/ply/practice/{practiceId})
func (_ Unimplemented) GetV1PlyPracticePracticeId(w http.ResponseWriter, r *http.Request, practiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a practice
// (POST /v1/ply/practice/{practiceId})
func (_ Unimplemented) PostV1PlyPracticePracticeId(w http.ResponseWriter, r *http.Request, practiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List documents
// (GET /v1/ply/practice/{practiceId}/document)
func (_ Unimplemented) GetV1PlyPracticePracticeIdDocument(w http.ResponseWriter, r *http.Request, practiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List enrollments
// (GET /v1/ply/practice/{practiceId}/enrollment)
func (_ Unimplemented) GetV1PlyPracticePracticeIdEnrollment(w http.ResponseWriter, r *http.Request, practiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List locations
// (GET /v1/ply/practice/{practiceId}/location)
func (_ Unimplemented) GetV1PlyPracticePracticeIdLocation(w http.ResponseWriter, r *http.Request, practiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List providers
// (GET /v1/ply/practice/{practiceId}/provider)
func (_ Unimplemented) GetV1PlyPracticePracticeIdProvider(w http.ResponseWriter, r *http.Request, practiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List tasks
// (GET /v1/ply/practice/{practiceId}/task)
func (_ Unimplemented) GetV1PlyPracticePracticeIdTask(w http.ResponseWriter, r *http.Request, practiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload a document for a practice
// (POST /v1/ply/practice/{practiceId}/upload)
func (_ Unimplemented) PostV1PlyPracticePracticeIdUpload(w http.ResponseWriter, r *http.Request, practiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a provider
// (POST /v1/ply/provider)
func (_ Unimplemented) PostV1PlyProvider(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a provider
// (DELETE /v1/ply/provider/{providerId})
func (_ Unimplemented) DeleteV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request, providerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read a provider
// (GET /v1/ply/provider/{providerId})
func (_ Unimplemented) GetV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request, providerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a provider
// (POST /v1/ply/provider/{providerId})
func (_ Unimplemented) PostV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request, providerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a task
// (POST /v1/ply/task/{taskId})
func (_ Unimplemented) PostV1PlyTaskTaskId(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteV1PlyDocumentDocumentId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1PlyDocumentDocumentId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "documentId" -------------
	var documentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "documentId", runtime.ParamLocationPath, chi.URLParam(r, "documentId"), &documentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "documentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV1PlyDocumentDocumentId(w, r, documentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyDocumentDocumentId operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyDocumentDocumentId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "documentId" -------------
	var documentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "documentId", runtime.ParamLocationPath, chi.URLParam(r, "documentId"), &documentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "documentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyDocumentDocumentId(w, r, documentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyEnrollment operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyEnrollment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyEnrollment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteV1PlyEnrollmentEnrollmentId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "enrollmentId" -------------
	var enrollmentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "enrollmentId", runtime.ParamLocationPath, chi.URLParam(r, "enrollmentId"), &enrollmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "enrollmentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV1PlyEnrollmentEnrollmentId(w, r, enrollmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyEnrollmentEnrollmentId operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "enrollmentId" -------------
	var enrollmentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "enrollmentId", runtime.ParamLocationPath, chi.URLParam(r, "enrollmentId"), &enrollmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "enrollmentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyEnrollmentEnrollmentId(w, r, enrollmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyEnrollmentEnrollmentId operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "enrollmentId" -------------
	var enrollmentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "enrollmentId", runtime.ParamLocationPath, chi.URLParam(r, "enrollmentId"), &enrollmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "enrollmentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyEnrollmentEnrollmentId(w, r, enrollmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyEnrollmentEnrollmentIdActivity operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyEnrollmentEnrollmentIdActivity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "enrollmentId" -------------
	var enrollmentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "enrollmentId", runtime.ParamLocationPath, chi.URLParam(r, "enrollmentId"), &enrollmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "enrollmentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyEnrollmentEnrollmentIdActivity(w, r, enrollmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyLocation operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyLocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyLocation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteV1PlyLocationLocationId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "locationId", runtime.ParamLocationPath, chi.URLParam(r, "locationId"), &locationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV1PlyLocationLocationId(w, r, locationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyLocationLocationId operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "locationId", runtime.ParamLocationPath, chi.URLParam(r, "locationId"), &locationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyLocationLocationId(w, r, locationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyLocationLocationId operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "locationId", runtime.ParamLocationPath, chi.URLParam(r, "locationId"), &locationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyLocationLocationId(w, r, locationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyPractice operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyPractice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyPractice(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyPracticeList operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyPracticeList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyPracticeList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyPracticePracticeId operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyPracticePracticeId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "practiceId" -------------
	var practiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "practiceId", runtime.ParamLocationPath, chi.URLParam(r, "practiceId"), &practiceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "practiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyPracticePracticeId(w, r, practiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyPracticePracticeId operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyPracticePracticeId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "practiceId" -------------
	var practiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "practiceId", runtime.ParamLocationPath, chi.URLParam(r, "practiceId"), &practiceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "practiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyPracticePracticeId(w, r, practiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyPracticePracticeIdDocument operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyPracticePracticeIdDocument(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "practiceId" -------------
	var practiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "practiceId", runtime.ParamLocationPath, chi.URLParam(r, "practiceId"), &practiceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "practiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyPracticePracticeIdDocument(w, r, practiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyPracticePracticeIdEnrollment operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyPracticePracticeIdEnrollment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "practiceId" -------------
	var practiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "practiceId", runtime.ParamLocationPath, chi.URLParam(r, "practiceId"), &practiceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "practiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyPracticePracticeIdEnrollment(w, r, practiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyPracticePracticeIdLocation operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyPracticePracticeIdLocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "practiceId" -------------
	var practiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "practiceId", runtime.ParamLocationPath, chi.URLParam(r, "practiceId"), &practiceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "practiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyPracticePracticeIdLocation(w, r, practiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyPracticePracticeIdProvider operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyPracticePracticeIdProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "practiceId" -------------
	var practiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "practiceId", runtime.ParamLocationPath, chi.URLParam(r, "practiceId"), &practiceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "practiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyPracticePracticeIdProvider(w, r, practiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyPracticePracticeIdTask operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyPracticePracticeIdTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "practiceId" -------------
	var practiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "practiceId", runtime.ParamLocationPath, chi.URLParam(r, "practiceId"), &practiceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "practiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyPracticePracticeIdTask(w, r, practiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyPracticePracticeIdUpload operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyPracticePracticeIdUpload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "practiceId" -------------
	var practiceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "practiceId", runtime.ParamLocationPath, chi.URLParam(r, "practiceId"), &practiceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "practiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyPracticePracticeIdUpload(w, r, practiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyProvider operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyProvider(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteV1PlyProviderProviderId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV1PlyProviderProviderId(w, r, providerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1PlyProviderProviderId operation middleware
func (siw *ServerInterfaceWrapper) GetV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1PlyProviderProviderId(w, r, providerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyProviderProviderId operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyProviderProviderId(w, r, providerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1PlyTaskTaskId operation middleware
func (siw *ServerInterfaceWrapper) PostV1PlyTaskTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, chi.URLParam(r, "taskId"), &taskId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1PlyTaskTaskId(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/ply/document/{documentId}", wrapper.DeleteV1PlyDocumentDocumentId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/document/{documentId}", wrapper.GetV1PlyDocumentDocumentId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/enrollment", wrapper.PostV1PlyEnrollment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/ply/enrollment/{enrollmentId}", wrapper.DeleteV1PlyEnrollmentEnrollmentId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/enrollment/{enrollmentId}", wrapper.GetV1PlyEnrollmentEnrollmentId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/enrollment/{enrollmentId}", wrapper.PostV1PlyEnrollmentEnrollmentId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/enrollment/{enrollmentId}/activity", wrapper.GetV1PlyEnrollmentEnrollmentIdActivity)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/location", wrapper.PostV1PlyLocation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/ply/location/{locationId}", wrapper.DeleteV1PlyLocationLocationId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/location/{locationId}", wrapper.GetV1PlyLocationLocationId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/location/{locationId}", wrapper.PostV1PlyLocationLocationId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/practice", wrapper.PostV1PlyPractice)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/practice/list", wrapper.GetV1PlyPracticeList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/practice/{practiceId}", wrapper.GetV1PlyPracticePracticeId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/practice/{practiceId}", wrapper.PostV1PlyPracticePracticeId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/practice/{practiceId}/document", wrapper.GetV1PlyPracticePracticeIdDocument)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/practice/{practiceId}/enrollment", wrapper.GetV1PlyPracticePracticeIdEnrollment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/practice/{practiceId}/location", wrapper.GetV1PlyPracticePracticeIdLocation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/practice/{practiceId}/provider", wrapper.GetV1PlyPracticePracticeIdProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/practice/{practiceId}/task", wrapper.GetV1PlyPracticePracticeIdTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/practice/{practiceId}/upload", wrapper.PostV1PlyPracticePracticeIdUpload)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/provider", wrapper.PostV1PlyProvider)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/ply/provider/{providerId}", wrapper.DeleteV1PlyProviderProviderId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ply/provider/{providerId}", wrapper.GetV1PlyProviderProviderId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/provider/{providerId}", wrapper.PostV1PlyProviderProviderId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/ply/task/{taskId}", wrapper.PostV1PlyTaskTaskId)
	})

	return r
}

type DeleteV1PlyDocumentDocumentIdRequestObject struct {
	DocumentId string `json:"documentId"`
}

type DeleteV1PlyDocumentDocumentIdResponseObject interface {
	VisitDeleteV1PlyDocumentDocumentIdResponse(w http.ResponseWriter) error
}

type DeleteV1PlyDocumentDocumentId200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response DeleteV1PlyDocumentDocumentId200JSONResponse) VisitDeleteV1PlyDocumentDocumentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV1PlyDocumentDocumentId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response DeleteV1PlyDocumentDocumentId500JSONResponse) VisitDeleteV1PlyDocumentDocumentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyDocumentDocumentIdRequestObject struct {
	DocumentId string `json:"documentId"`
}

type GetV1PlyDocumentDocumentIdResponseObject interface {
	VisitGetV1PlyDocumentDocumentIdResponse(w http.ResponseWriter) error
}

type GetV1PlyDocumentDocumentId200AsteriskResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response GetV1PlyDocumentDocumentId200AsteriskResponse) VisitGetV1PlyDocumentDocumentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetV1PlyDocumentDocumentId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyDocumentDocumentId500JSONResponse) VisitGetV1PlyDocumentDocumentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyEnrollmentRequestObject struct {
	Body *PostV1PlyEnrollmentJSONRequestBody
}

type PostV1PlyEnrollmentResponseObject interface {
	VisitPostV1PlyEnrollmentResponse(w http.ResponseWriter) error
}

type PostV1PlyEnrollment200JSONResponse struct {
	EnrollmentId *string `json:"enrollmentId,omitempty"`
}

func (response PostV1PlyEnrollment200JSONResponse) VisitPostV1PlyEnrollmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyEnrollment500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyEnrollment500JSONResponse) VisitPostV1PlyEnrollmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV1PlyEnrollmentEnrollmentIdRequestObject struct {
	EnrollmentId string `json:"enrollmentId"`
}

type DeleteV1PlyEnrollmentEnrollmentIdResponseObject interface {
	VisitDeleteV1PlyEnrollmentEnrollmentIdResponse(w http.ResponseWriter) error
}

type DeleteV1PlyEnrollmentEnrollmentId200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response DeleteV1PlyEnrollmentEnrollmentId200JSONResponse) VisitDeleteV1PlyEnrollmentEnrollmentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV1PlyEnrollmentEnrollmentId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response DeleteV1PlyEnrollmentEnrollmentId500JSONResponse) VisitDeleteV1PlyEnrollmentEnrollmentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyEnrollmentEnrollmentIdRequestObject struct {
	EnrollmentId string `json:"enrollmentId"`
}

type GetV1PlyEnrollmentEnrollmentIdResponseObject interface {
	VisitGetV1PlyEnrollmentEnrollmentIdResponse(w http.ResponseWriter) error
}

type GetV1PlyEnrollmentEnrollmentId200JSONResponse struct {
	EnrollmentId *string `json:"enrollmentId,omitempty"`
	LocationId   *string `json:"locationId,omitempty"`
	Payer        *string `json:"payer,omitempty"`
	PracticeId   *string `json:"practiceId,omitempty"`
	ProviderId   *string `json:"providerId,omitempty"`
	State        *string `json:"state,omitempty"`
	Status       *string `json:"status,omitempty"`
	Type         *string `json:"type,omitempty"`
}

func (response GetV1PlyEnrollmentEnrollmentId200JSONResponse) VisitGetV1PlyEnrollmentEnrollmentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyEnrollmentEnrollmentId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyEnrollmentEnrollmentId500JSONResponse) VisitGetV1PlyEnrollmentEnrollmentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyEnrollmentEnrollmentIdRequestObject struct {
	EnrollmentId string `json:"enrollmentId"`
	Body         *PostV1PlyEnrollmentEnrollmentIdJSONRequestBody
}

type PostV1PlyEnrollmentEnrollmentIdResponseObject interface {
	VisitPostV1PlyEnrollmentEnrollmentIdResponse(w http.ResponseWriter) error
}

type PostV1PlyEnrollmentEnrollmentId200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response PostV1PlyEnrollmentEnrollmentId200JSONResponse) VisitPostV1PlyEnrollmentEnrollmentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyEnrollmentEnrollmentId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyEnrollmentEnrollmentId500JSONResponse) VisitPostV1PlyEnrollmentEnrollmentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyEnrollmentEnrollmentIdActivityRequestObject struct {
	EnrollmentId string `json:"enrollmentId"`
}

type GetV1PlyEnrollmentEnrollmentIdActivityResponseObject interface {
	VisitGetV1PlyEnrollmentEnrollmentIdActivityResponse(w http.ResponseWriter) error
}

type GetV1PlyEnrollmentEnrollmentIdActivity200JSONResponse struct {
	Activities *[]struct {
		ActivityId   *string `json:"activityId,omitempty"`
		EnrollmentId *string `json:"enrollmentId,omitempty"`
		Message      *string `json:"message,omitempty"`
	} `json:"activities,omitempty"`
}

func (response GetV1PlyEnrollmentEnrollmentIdActivity200JSONResponse) VisitGetV1PlyEnrollmentEnrollmentIdActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyEnrollmentEnrollmentIdActivity500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyEnrollmentEnrollmentIdActivity500JSONResponse) VisitGetV1PlyEnrollmentEnrollmentIdActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyLocationRequestObject struct {
	Body *PostV1PlyLocationJSONRequestBody
}

type PostV1PlyLocationResponseObject interface {
	VisitPostV1PlyLocationResponse(w http.ResponseWriter) error
}

type PostV1PlyLocation200JSONResponse struct {
	LocationId *string `json:"locationId,omitempty"`
}

func (response PostV1PlyLocation200JSONResponse) VisitPostV1PlyLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyLocation500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyLocation500JSONResponse) VisitPostV1PlyLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV1PlyLocationLocationIdRequestObject struct {
	LocationId string `json:"locationId"`
}

type DeleteV1PlyLocationLocationIdResponseObject interface {
	VisitDeleteV1PlyLocationLocationIdResponse(w http.ResponseWriter) error
}

type DeleteV1PlyLocationLocationId200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response DeleteV1PlyLocationLocationId200JSONResponse) VisitDeleteV1PlyLocationLocationIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV1PlyLocationLocationId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response DeleteV1PlyLocationLocationId500JSONResponse) VisitDeleteV1PlyLocationLocationIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyLocationLocationIdRequestObject struct {
	LocationId string `json:"locationId"`
}

type GetV1PlyLocationLocationIdResponseObject interface {
	VisitGetV1PlyLocationLocationIdResponse(w http.ResponseWriter) error
}

type GetV1PlyLocationLocationId200JSONResponse struct {
	Address    *string `json:"address,omitempty"`
	LocationId *string `json:"locationId,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
}

func (response GetV1PlyLocationLocationId200JSONResponse) VisitGetV1PlyLocationLocationIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyLocationLocationId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyLocationLocationId500JSONResponse) VisitGetV1PlyLocationLocationIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyLocationLocationIdRequestObject struct {
	LocationId string `json:"locationId"`
	Body       *PostV1PlyLocationLocationIdJSONRequestBody
}

type PostV1PlyLocationLocationIdResponseObject interface {
	VisitPostV1PlyLocationLocationIdResponse(w http.ResponseWriter) error
}

type PostV1PlyLocationLocationId200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response PostV1PlyLocationLocationId200JSONResponse) VisitPostV1PlyLocationLocationIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyLocationLocationId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyLocationLocationId500JSONResponse) VisitPostV1PlyLocationLocationIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyPracticeRequestObject struct {
	Body *PostV1PlyPracticeJSONRequestBody
}

type PostV1PlyPracticeResponseObject interface {
	VisitPostV1PlyPracticeResponse(w http.ResponseWriter) error
}

type PostV1PlyPractice200JSONResponse struct {
	PracticeId *string `json:"practiceId,omitempty"`
}

func (response PostV1PlyPractice200JSONResponse) VisitPostV1PlyPracticeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyPractice500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyPractice500JSONResponse) VisitPostV1PlyPracticeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticeListRequestObject struct {
}

type GetV1PlyPracticeListResponseObject interface {
	VisitGetV1PlyPracticeListResponse(w http.ResponseWriter) error
}

type GetV1PlyPracticeList200JSONResponse struct {
	Practices *[]struct {
		Ein        *string `json:"ein,omitempty"`
		Name       *string `json:"name,omitempty"`
		OwnerName  *string `json:"owner_name,omitempty"`
		PracticeId *string `json:"practiceId,omitempty"`
	} `json:"practices,omitempty"`
}

func (response GetV1PlyPracticeList200JSONResponse) VisitGetV1PlyPracticeListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticeList500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyPracticeList500JSONResponse) VisitGetV1PlyPracticeListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdRequestObject struct {
	PracticeId string `json:"practiceId"`
}

type GetV1PlyPracticePracticeIdResponseObject interface {
	VisitGetV1PlyPracticePracticeIdResponse(w http.ResponseWriter) error
}

type GetV1PlyPracticePracticeId200JSONResponse struct {
	Ein        *string `json:"ein,omitempty"`
	Name       *string `json:"name,omitempty"`
	OwnerName  *string `json:"owner_name,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
}

func (response GetV1PlyPracticePracticeId200JSONResponse) VisitGetV1PlyPracticePracticeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyPracticePracticeId500JSONResponse) VisitGetV1PlyPracticePracticeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyPracticePracticeIdRequestObject struct {
	PracticeId string `json:"practiceId"`
	Body       *PostV1PlyPracticePracticeIdJSONRequestBody
}

type PostV1PlyPracticePracticeIdResponseObject interface {
	VisitPostV1PlyPracticePracticeIdResponse(w http.ResponseWriter) error
}

type PostV1PlyPracticePracticeId200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response PostV1PlyPracticePracticeId200JSONResponse) VisitPostV1PlyPracticePracticeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyPracticePracticeId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyPracticePracticeId500JSONResponse) VisitPostV1PlyPracticePracticeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdDocumentRequestObject struct {
	PracticeId string `json:"practiceId"`
}

type GetV1PlyPracticePracticeIdDocumentResponseObject interface {
	VisitGetV1PlyPracticePracticeIdDocumentResponse(w http.ResponseWriter) error
}

type GetV1PlyPracticePracticeIdDocument200JSONResponse struct {
	Documents *[]struct {
		DocumentId  *string `json:"documentId,omitempty"`
		FileName    *string `json:"file_name,omitempty"`
		PracticeId  *string `json:"practiceId,omitempty"`
		StoragePath *string `json:"storage_path,omitempty"`
	} `json:"documents,omitempty"`
}

func (response GetV1PlyPracticePracticeIdDocument200JSONResponse) VisitGetV1PlyPracticePracticeIdDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdDocument500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyPracticePracticeIdDocument500JSONResponse) VisitGetV1PlyPracticePracticeIdDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdEnrollmentRequestObject struct {
	PracticeId string `json:"practiceId"`
}

type GetV1PlyPracticePracticeIdEnrollmentResponseObject interface {
	VisitGetV1PlyPracticePracticeIdEnrollmentResponse(w http.ResponseWriter) error
}

type GetV1PlyPracticePracticeIdEnrollment200JSONResponse struct {
	Enrollments *[]struct {
		EnrollmentId *string `json:"enrollmentId,omitempty"`
		LocationId   *string `json:"locationId,omitempty"`
		Payer        *string `json:"payer,omitempty"`
		PracticeId   *string `json:"practiceId,omitempty"`
		ProviderId   *string `json:"providerId,omitempty"`
		State        *string `json:"state,omitempty"`
		Status       *string `json:"status,omitempty"`
		Type         *string `json:"type,omitempty"`
	} `json:"enrollments,omitempty"`
}

func (response GetV1PlyPracticePracticeIdEnrollment200JSONResponse) VisitGetV1PlyPracticePracticeIdEnrollmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdEnrollment500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyPracticePracticeIdEnrollment500JSONResponse) VisitGetV1PlyPracticePracticeIdEnrollmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdLocationRequestObject struct {
	PracticeId string `json:"practiceId"`
}

type GetV1PlyPracticePracticeIdLocationResponseObject interface {
	VisitGetV1PlyPracticePracticeIdLocationResponse(w http.ResponseWriter) error
}

type GetV1PlyPracticePracticeIdLocation200JSONResponse struct {
	Locations *[]struct {
		Address    *string `json:"address,omitempty"`
		LocationId *string `json:"locationId,omitempty"`
		PracticeId *string `json:"practiceId,omitempty"`
	} `json:"locations,omitempty"`
}

func (response GetV1PlyPracticePracticeIdLocation200JSONResponse) VisitGetV1PlyPracticePracticeIdLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdLocation500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyPracticePracticeIdLocation500JSONResponse) VisitGetV1PlyPracticePracticeIdLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdProviderRequestObject struct {
	PracticeId string `json:"practiceId"`
}

type GetV1PlyPracticePracticeIdProviderResponseObject interface {
	VisitGetV1PlyPracticePracticeIdProviderResponse(w http.ResponseWriter) error
}

type GetV1PlyPracticePracticeIdProvider200JSONResponse struct {
	Providers *[]struct {
		Name       *string `json:"name,omitempty"`
		PracticeId *string `json:"practiceId,omitempty"`
		ProviderId *string `json:"providerId,omitempty"`
		Ssn        *string `json:"ssn,omitempty"`
	} `json:"providers,omitempty"`
}

func (response GetV1PlyPracticePracticeIdProvider200JSONResponse) VisitGetV1PlyPracticePracticeIdProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdProvider500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyPracticePracticeIdProvider500JSONResponse) VisitGetV1PlyPracticePracticeIdProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdTaskRequestObject struct {
	PracticeId string `json:"practiceId"`
}

type GetV1PlyPracticePracticeIdTaskResponseObject interface {
	VisitGetV1PlyPracticePracticeIdTaskResponse(w http.ResponseWriter) error
}

type GetV1PlyPracticePracticeIdTask200JSONResponse struct {
	Tasks *[]struct {
		Message    *string `json:"message,omitempty"`
		PracticeId *string `json:"practiceId,omitempty"`
		Status     *string `json:"status,omitempty"`
		TaskId     *string `json:"taskId,omitempty"`
	} `json:"tasks,omitempty"`
}

func (response GetV1PlyPracticePracticeIdTask200JSONResponse) VisitGetV1PlyPracticePracticeIdTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyPracticePracticeIdTask500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyPracticePracticeIdTask500JSONResponse) VisitGetV1PlyPracticePracticeIdTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyPracticePracticeIdUploadRequestObject struct {
	PracticeId string `json:"practiceId"`
	Body       *multipart.Reader
}

type PostV1PlyPracticePracticeIdUploadResponseObject interface {
	VisitPostV1PlyPracticePracticeIdUploadResponse(w http.ResponseWriter) error
}

type PostV1PlyPracticePracticeIdUpload200JSONResponse struct {
	DocumentId *string `json:"documentId,omitempty"`
}

func (response PostV1PlyPracticePracticeIdUpload200JSONResponse) VisitPostV1PlyPracticePracticeIdUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyPracticePracticeIdUpload500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyPracticePracticeIdUpload500JSONResponse) VisitPostV1PlyPracticePracticeIdUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyProviderRequestObject struct {
	Body *PostV1PlyProviderJSONRequestBody
}

type PostV1PlyProviderResponseObject interface {
	VisitPostV1PlyProviderResponse(w http.ResponseWriter) error
}

type PostV1PlyProvider200JSONResponse struct {
	ProviderId *string `json:"providerId,omitempty"`
}

func (response PostV1PlyProvider200JSONResponse) VisitPostV1PlyProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyProvider500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyProvider500JSONResponse) VisitPostV1PlyProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV1PlyProviderProviderIdRequestObject struct {
	ProviderId string `json:"providerId"`
}

type DeleteV1PlyProviderProviderIdResponseObject interface {
	VisitDeleteV1PlyProviderProviderIdResponse(w http.ResponseWriter) error
}

type DeleteV1PlyProviderProviderId200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response DeleteV1PlyProviderProviderId200JSONResponse) VisitDeleteV1PlyProviderProviderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV1PlyProviderProviderId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response DeleteV1PlyProviderProviderId500JSONResponse) VisitDeleteV1PlyProviderProviderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyProviderProviderIdRequestObject struct {
	ProviderId string `json:"providerId"`
}

type GetV1PlyProviderProviderIdResponseObject interface {
	VisitGetV1PlyProviderProviderIdResponse(w http.ResponseWriter) error
}

type GetV1PlyProviderProviderId200JSONResponse struct {
	Name       *string `json:"name,omitempty"`
	PracticeId *string `json:"practiceId,omitempty"`
	ProviderId *string `json:"providerId,omitempty"`
	Ssn        *string `json:"ssn,omitempty"`
}

func (response GetV1PlyProviderProviderId200JSONResponse) VisitGetV1PlyProviderProviderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1PlyProviderProviderId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response GetV1PlyProviderProviderId500JSONResponse) VisitGetV1PlyProviderProviderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyProviderProviderIdRequestObject struct {
	ProviderId string `json:"providerId"`
	Body       *PostV1PlyProviderProviderIdJSONRequestBody
}

type PostV1PlyProviderProviderIdResponseObject interface {
	VisitPostV1PlyProviderProviderIdResponse(w http.ResponseWriter) error
}

type PostV1PlyProviderProviderId200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response PostV1PlyProviderProviderId200JSONResponse) VisitPostV1PlyProviderProviderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyProviderProviderId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyProviderProviderId500JSONResponse) VisitPostV1PlyProviderProviderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyTaskTaskIdRequestObject struct {
	TaskId string `json:"taskId"`
	Body   *PostV1PlyTaskTaskIdJSONRequestBody
}

type PostV1PlyTaskTaskIdResponseObject interface {
	VisitPostV1PlyTaskTaskIdResponse(w http.ResponseWriter) error
}

type PostV1PlyTaskTaskId200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response PostV1PlyTaskTaskId200JSONResponse) VisitPostV1PlyTaskTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1PlyTaskTaskId500JSONResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

func (response PostV1PlyTaskTaskId500JSONResponse) VisitPostV1PlyTaskTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete a document
	// (DELETE /v1/ply/document/{documentId})
	DeleteV1PlyDocumentDocumentId(ctx context.Context, request DeleteV1PlyDocumentDocumentIdRequestObject) (DeleteV1PlyDocumentDocumentIdResponseObject, error)
	// Get a document by ID
	// (GET /v1/ply/document/{documentId})
	GetV1PlyDocumentDocumentId(ctx context.Context, request GetV1PlyDocumentDocumentIdRequestObject) (GetV1PlyDocumentDocumentIdResponseObject, error)
	// Create an enrollment
	// (POST /v1/ply/enrollment)
	PostV1PlyEnrollment(ctx context.Context, request PostV1PlyEnrollmentRequestObject) (PostV1PlyEnrollmentResponseObject, error)
	// Delete a enrollment
	// (DELETE /v1/ply/enrollment/{enrollmentId})
	DeleteV1PlyEnrollmentEnrollmentId(ctx context.Context, request DeleteV1PlyEnrollmentEnrollmentIdRequestObject) (DeleteV1PlyEnrollmentEnrollmentIdResponseObject, error)
	// Read a enrollment
	// (GET /v1/ply/enrollment/{enrollmentId})
	GetV1PlyEnrollmentEnrollmentId(ctx context.Context, request GetV1PlyEnrollmentEnrollmentIdRequestObject) (GetV1PlyEnrollmentEnrollmentIdResponseObject, error)
	// Update a enrollment
	// (POST /v1/ply/enrollment/{enrollmentId})
	PostV1PlyEnrollmentEnrollmentId(ctx context.Context, request PostV1PlyEnrollmentEnrollmentIdRequestObject) (PostV1PlyEnrollmentEnrollmentIdResponseObject, error)
	// List activities
	// (GET /v1/ply/enrollment/{enrollmentId}/activity)
	GetV1PlyEnrollmentEnrollmentIdActivity(ctx context.Context, request GetV1PlyEnrollmentEnrollmentIdActivityRequestObject) (GetV1PlyEnrollmentEnrollmentIdActivityResponseObject, error)
	// Create a location
	// (POST /v1/ply/location)
	PostV1PlyLocation(ctx context.Context, request PostV1PlyLocationRequestObject) (PostV1PlyLocationResponseObject, error)
	// Delete a location
	// (DELETE /v1/ply/location/{locationId})
	DeleteV1PlyLocationLocationId(ctx context.Context, request DeleteV1PlyLocationLocationIdRequestObject) (DeleteV1PlyLocationLocationIdResponseObject, error)
	// Read a location
	// (GET /v1/ply/location/{locationId})
	GetV1PlyLocationLocationId(ctx context.Context, request GetV1PlyLocationLocationIdRequestObject) (GetV1PlyLocationLocationIdResponseObject, error)
	// Update a location
	// (POST /v1/ply/location/{locationId})
	PostV1PlyLocationLocationId(ctx context.Context, request PostV1PlyLocationLocationIdRequestObject) (PostV1PlyLocationLocationIdResponseObject, error)
	// Create a practice
	// (POST /v1/ply/practice)
	PostV1PlyPractice(ctx context.Context, request PostV1PlyPracticeRequestObject) (PostV1PlyPracticeResponseObject, error)
	// List practices
	// (GET /v1/ply/practice/list)
	GetV1PlyPracticeList(ctx context.Context, request GetV1PlyPracticeListRequestObject) (GetV1PlyPracticeListResponseObject, error)
	// Read a practice
	// (GET /v1/ply/practice/{practiceId})
	GetV1PlyPracticePracticeId(ctx context.Context, request GetV1PlyPracticePracticeIdRequestObject) (GetV1PlyPracticePracticeIdResponseObject, error)
	// Update a practice
	// (POST /v1/ply/practice/{practiceId})
	PostV1PlyPracticePracticeId(ctx context.Context, request PostV1PlyPracticePracticeIdRequestObject) (PostV1PlyPracticePracticeIdResponseObject, error)
	// List documents
	// (GET /v1/ply/practice/{practiceId}/document)
	GetV1PlyPracticePracticeIdDocument(ctx context.Context, request GetV1PlyPracticePracticeIdDocumentRequestObject) (GetV1PlyPracticePracticeIdDocumentResponseObject, error)
	// List enrollments
	// (GET /v1/ply/practice/{practiceId}/enrollment)
	GetV1PlyPracticePracticeIdEnrollment(ctx context.Context, request GetV1PlyPracticePracticeIdEnrollmentRequestObject) (GetV1PlyPracticePracticeIdEnrollmentResponseObject, error)
	// List locations
	// (GET /v1/ply/practice/{practiceId}/location)
	GetV1PlyPracticePracticeIdLocation(ctx context.Context, request GetV1PlyPracticePracticeIdLocationRequestObject) (GetV1PlyPracticePracticeIdLocationResponseObject, error)
	// List providers
	// (GET /v1/ply/practice/{practiceId}/provider)
	GetV1PlyPracticePracticeIdProvider(ctx context.Context, request GetV1PlyPracticePracticeIdProviderRequestObject) (GetV1PlyPracticePracticeIdProviderResponseObject, error)
	// List tasks
	// (GET /v1/ply/practice/{practiceId}/task)
	GetV1PlyPracticePracticeIdTask(ctx context.Context, request GetV1PlyPracticePracticeIdTaskRequestObject) (GetV1PlyPracticePracticeIdTaskResponseObject, error)
	// Upload a document for a practice
	// (POST /v1/ply/practice/{practiceId}/upload)
	PostV1PlyPracticePracticeIdUpload(ctx context.Context, request PostV1PlyPracticePracticeIdUploadRequestObject) (PostV1PlyPracticePracticeIdUploadResponseObject, error)
	// Create a provider
	// (POST /v1/ply/provider)
	PostV1PlyProvider(ctx context.Context, request PostV1PlyProviderRequestObject) (PostV1PlyProviderResponseObject, error)
	// Delete a provider
	// (DELETE /v1/ply/provider/{providerId})
	DeleteV1PlyProviderProviderId(ctx context.Context, request DeleteV1PlyProviderProviderIdRequestObject) (DeleteV1PlyProviderProviderIdResponseObject, error)
	// Read a provider
	// (GET /v1/ply/provider/{providerId})
	GetV1PlyProviderProviderId(ctx context.Context, request GetV1PlyProviderProviderIdRequestObject) (GetV1PlyProviderProviderIdResponseObject, error)
	// Update a provider
	// (POST /v1/ply/provider/{providerId})
	PostV1PlyProviderProviderId(ctx context.Context, request PostV1PlyProviderProviderIdRequestObject) (PostV1PlyProviderProviderIdResponseObject, error)
	// Update a task
	// (POST /v1/ply/task/{taskId})
	PostV1PlyTaskTaskId(ctx context.Context, request PostV1PlyTaskTaskIdRequestObject) (PostV1PlyTaskTaskIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteV1PlyDocumentDocumentId operation middleware
func (sh *strictHandler) DeleteV1PlyDocumentDocumentId(w http.ResponseWriter, r *http.Request, documentId string) {
	var request DeleteV1PlyDocumentDocumentIdRequestObject

	request.DocumentId = documentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteV1PlyDocumentDocumentId(ctx, request.(DeleteV1PlyDocumentDocumentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteV1PlyDocumentDocumentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteV1PlyDocumentDocumentIdResponseObject); ok {
		if err := validResponse.VisitDeleteV1PlyDocumentDocumentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyDocumentDocumentId operation middleware
func (sh *strictHandler) GetV1PlyDocumentDocumentId(w http.ResponseWriter, r *http.Request, documentId string) {
	var request GetV1PlyDocumentDocumentIdRequestObject

	request.DocumentId = documentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyDocumentDocumentId(ctx, request.(GetV1PlyDocumentDocumentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyDocumentDocumentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyDocumentDocumentIdResponseObject); ok {
		if err := validResponse.VisitGetV1PlyDocumentDocumentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyEnrollment operation middleware
func (sh *strictHandler) PostV1PlyEnrollment(w http.ResponseWriter, r *http.Request) {
	var request PostV1PlyEnrollmentRequestObject

	var body PostV1PlyEnrollmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyEnrollment(ctx, request.(PostV1PlyEnrollmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyEnrollment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyEnrollmentResponseObject); ok {
		if err := validResponse.VisitPostV1PlyEnrollmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteV1PlyEnrollmentEnrollmentId operation middleware
func (sh *strictHandler) DeleteV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request, enrollmentId string) {
	var request DeleteV1PlyEnrollmentEnrollmentIdRequestObject

	request.EnrollmentId = enrollmentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteV1PlyEnrollmentEnrollmentId(ctx, request.(DeleteV1PlyEnrollmentEnrollmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteV1PlyEnrollmentEnrollmentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteV1PlyEnrollmentEnrollmentIdResponseObject); ok {
		if err := validResponse.VisitDeleteV1PlyEnrollmentEnrollmentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyEnrollmentEnrollmentId operation middleware
func (sh *strictHandler) GetV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request, enrollmentId string) {
	var request GetV1PlyEnrollmentEnrollmentIdRequestObject

	request.EnrollmentId = enrollmentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyEnrollmentEnrollmentId(ctx, request.(GetV1PlyEnrollmentEnrollmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyEnrollmentEnrollmentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyEnrollmentEnrollmentIdResponseObject); ok {
		if err := validResponse.VisitGetV1PlyEnrollmentEnrollmentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyEnrollmentEnrollmentId operation middleware
func (sh *strictHandler) PostV1PlyEnrollmentEnrollmentId(w http.ResponseWriter, r *http.Request, enrollmentId string) {
	var request PostV1PlyEnrollmentEnrollmentIdRequestObject

	request.EnrollmentId = enrollmentId

	var body PostV1PlyEnrollmentEnrollmentIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyEnrollmentEnrollmentId(ctx, request.(PostV1PlyEnrollmentEnrollmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyEnrollmentEnrollmentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyEnrollmentEnrollmentIdResponseObject); ok {
		if err := validResponse.VisitPostV1PlyEnrollmentEnrollmentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyEnrollmentEnrollmentIdActivity operation middleware
func (sh *strictHandler) GetV1PlyEnrollmentEnrollmentIdActivity(w http.ResponseWriter, r *http.Request, enrollmentId string) {
	var request GetV1PlyEnrollmentEnrollmentIdActivityRequestObject

	request.EnrollmentId = enrollmentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyEnrollmentEnrollmentIdActivity(ctx, request.(GetV1PlyEnrollmentEnrollmentIdActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyEnrollmentEnrollmentIdActivity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyEnrollmentEnrollmentIdActivityResponseObject); ok {
		if err := validResponse.VisitGetV1PlyEnrollmentEnrollmentIdActivityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyLocation operation middleware
func (sh *strictHandler) PostV1PlyLocation(w http.ResponseWriter, r *http.Request) {
	var request PostV1PlyLocationRequestObject

	var body PostV1PlyLocationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyLocation(ctx, request.(PostV1PlyLocationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyLocation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyLocationResponseObject); ok {
		if err := validResponse.VisitPostV1PlyLocationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteV1PlyLocationLocationId operation middleware
func (sh *strictHandler) DeleteV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request, locationId string) {
	var request DeleteV1PlyLocationLocationIdRequestObject

	request.LocationId = locationId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteV1PlyLocationLocationId(ctx, request.(DeleteV1PlyLocationLocationIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteV1PlyLocationLocationId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteV1PlyLocationLocationIdResponseObject); ok {
		if err := validResponse.VisitDeleteV1PlyLocationLocationIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyLocationLocationId operation middleware
func (sh *strictHandler) GetV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request, locationId string) {
	var request GetV1PlyLocationLocationIdRequestObject

	request.LocationId = locationId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyLocationLocationId(ctx, request.(GetV1PlyLocationLocationIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyLocationLocationId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyLocationLocationIdResponseObject); ok {
		if err := validResponse.VisitGetV1PlyLocationLocationIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyLocationLocationId operation middleware
func (sh *strictHandler) PostV1PlyLocationLocationId(w http.ResponseWriter, r *http.Request, locationId string) {
	var request PostV1PlyLocationLocationIdRequestObject

	request.LocationId = locationId

	var body PostV1PlyLocationLocationIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyLocationLocationId(ctx, request.(PostV1PlyLocationLocationIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyLocationLocationId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyLocationLocationIdResponseObject); ok {
		if err := validResponse.VisitPostV1PlyLocationLocationIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyPractice operation middleware
func (sh *strictHandler) PostV1PlyPractice(w http.ResponseWriter, r *http.Request) {
	var request PostV1PlyPracticeRequestObject

	var body PostV1PlyPracticeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyPractice(ctx, request.(PostV1PlyPracticeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyPractice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyPracticeResponseObject); ok {
		if err := validResponse.VisitPostV1PlyPracticeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyPracticeList operation middleware
func (sh *strictHandler) GetV1PlyPracticeList(w http.ResponseWriter, r *http.Request) {
	var request GetV1PlyPracticeListRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyPracticeList(ctx, request.(GetV1PlyPracticeListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyPracticeList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyPracticeListResponseObject); ok {
		if err := validResponse.VisitGetV1PlyPracticeListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyPracticePracticeId operation middleware
func (sh *strictHandler) GetV1PlyPracticePracticeId(w http.ResponseWriter, r *http.Request, practiceId string) {
	var request GetV1PlyPracticePracticeIdRequestObject

	request.PracticeId = practiceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyPracticePracticeId(ctx, request.(GetV1PlyPracticePracticeIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyPracticePracticeId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyPracticePracticeIdResponseObject); ok {
		if err := validResponse.VisitGetV1PlyPracticePracticeIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyPracticePracticeId operation middleware
func (sh *strictHandler) PostV1PlyPracticePracticeId(w http.ResponseWriter, r *http.Request, practiceId string) {
	var request PostV1PlyPracticePracticeIdRequestObject

	request.PracticeId = practiceId

	var body PostV1PlyPracticePracticeIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyPracticePracticeId(ctx, request.(PostV1PlyPracticePracticeIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyPracticePracticeId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyPracticePracticeIdResponseObject); ok {
		if err := validResponse.VisitPostV1PlyPracticePracticeIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyPracticePracticeIdDocument operation middleware
func (sh *strictHandler) GetV1PlyPracticePracticeIdDocument(w http.ResponseWriter, r *http.Request, practiceId string) {
	var request GetV1PlyPracticePracticeIdDocumentRequestObject

	request.PracticeId = practiceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyPracticePracticeIdDocument(ctx, request.(GetV1PlyPracticePracticeIdDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyPracticePracticeIdDocument")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyPracticePracticeIdDocumentResponseObject); ok {
		if err := validResponse.VisitGetV1PlyPracticePracticeIdDocumentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyPracticePracticeIdEnrollment operation middleware
func (sh *strictHandler) GetV1PlyPracticePracticeIdEnrollment(w http.ResponseWriter, r *http.Request, practiceId string) {
	var request GetV1PlyPracticePracticeIdEnrollmentRequestObject

	request.PracticeId = practiceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyPracticePracticeIdEnrollment(ctx, request.(GetV1PlyPracticePracticeIdEnrollmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyPracticePracticeIdEnrollment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyPracticePracticeIdEnrollmentResponseObject); ok {
		if err := validResponse.VisitGetV1PlyPracticePracticeIdEnrollmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyPracticePracticeIdLocation operation middleware
func (sh *strictHandler) GetV1PlyPracticePracticeIdLocation(w http.ResponseWriter, r *http.Request, practiceId string) {
	var request GetV1PlyPracticePracticeIdLocationRequestObject

	request.PracticeId = practiceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyPracticePracticeIdLocation(ctx, request.(GetV1PlyPracticePracticeIdLocationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyPracticePracticeIdLocation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyPracticePracticeIdLocationResponseObject); ok {
		if err := validResponse.VisitGetV1PlyPracticePracticeIdLocationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyPracticePracticeIdProvider operation middleware
func (sh *strictHandler) GetV1PlyPracticePracticeIdProvider(w http.ResponseWriter, r *http.Request, practiceId string) {
	var request GetV1PlyPracticePracticeIdProviderRequestObject

	request.PracticeId = practiceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyPracticePracticeIdProvider(ctx, request.(GetV1PlyPracticePracticeIdProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyPracticePracticeIdProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyPracticePracticeIdProviderResponseObject); ok {
		if err := validResponse.VisitGetV1PlyPracticePracticeIdProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyPracticePracticeIdTask operation middleware
func (sh *strictHandler) GetV1PlyPracticePracticeIdTask(w http.ResponseWriter, r *http.Request, practiceId string) {
	var request GetV1PlyPracticePracticeIdTaskRequestObject

	request.PracticeId = practiceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyPracticePracticeIdTask(ctx, request.(GetV1PlyPracticePracticeIdTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyPracticePracticeIdTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyPracticePracticeIdTaskResponseObject); ok {
		if err := validResponse.VisitGetV1PlyPracticePracticeIdTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyPracticePracticeIdUpload operation middleware
func (sh *strictHandler) PostV1PlyPracticePracticeIdUpload(w http.ResponseWriter, r *http.Request, practiceId string) {
	var request PostV1PlyPracticePracticeIdUploadRequestObject

	request.PracticeId = practiceId

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyPracticePracticeIdUpload(ctx, request.(PostV1PlyPracticePracticeIdUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyPracticePracticeIdUpload")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyPracticePracticeIdUploadResponseObject); ok {
		if err := validResponse.VisitPostV1PlyPracticePracticeIdUploadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyProvider operation middleware
func (sh *strictHandler) PostV1PlyProvider(w http.ResponseWriter, r *http.Request) {
	var request PostV1PlyProviderRequestObject

	var body PostV1PlyProviderJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyProvider(ctx, request.(PostV1PlyProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyProviderResponseObject); ok {
		if err := validResponse.VisitPostV1PlyProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteV1PlyProviderProviderId operation middleware
func (sh *strictHandler) DeleteV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request, providerId string) {
	var request DeleteV1PlyProviderProviderIdRequestObject

	request.ProviderId = providerId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteV1PlyProviderProviderId(ctx, request.(DeleteV1PlyProviderProviderIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteV1PlyProviderProviderId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteV1PlyProviderProviderIdResponseObject); ok {
		if err := validResponse.VisitDeleteV1PlyProviderProviderIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1PlyProviderProviderId operation middleware
func (sh *strictHandler) GetV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request, providerId string) {
	var request GetV1PlyProviderProviderIdRequestObject

	request.ProviderId = providerId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1PlyProviderProviderId(ctx, request.(GetV1PlyProviderProviderIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1PlyProviderProviderId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1PlyProviderProviderIdResponseObject); ok {
		if err := validResponse.VisitGetV1PlyProviderProviderIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyProviderProviderId operation middleware
func (sh *strictHandler) PostV1PlyProviderProviderId(w http.ResponseWriter, r *http.Request, providerId string) {
	var request PostV1PlyProviderProviderIdRequestObject

	request.ProviderId = providerId

	var body PostV1PlyProviderProviderIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyProviderProviderId(ctx, request.(PostV1PlyProviderProviderIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyProviderProviderId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyProviderProviderIdResponseObject); ok {
		if err := validResponse.VisitPostV1PlyProviderProviderIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1PlyTaskTaskId operation middleware
func (sh *strictHandler) PostV1PlyTaskTaskId(w http.ResponseWriter, r *http.Request, taskId string) {
	var request PostV1PlyTaskTaskIdRequestObject

	request.TaskId = taskId

	var body PostV1PlyTaskTaskIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1PlyTaskTaskId(ctx, request.(PostV1PlyTaskTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1PlyTaskTaskId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1PlyTaskTaskIdResponseObject); ok {
		if err := validResponse.VisitPostV1PlyTaskTaskIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xaX2/bNhD/KgS3p8KL0hZ78Vs3B12AYjCydi9FUTDS2WEniypJuTAMffeBkiiSFm1R",
	"rpToLbFOx7vf7/6R4hHHbJezDDIp8PKIc8LJDiTw6r+ExcUOMnmfVP+BiDnNJWUZXuKPT4CKjH4vANEE",
	"Mkk3FDhiGySfAOkX8QJTJZwT+YQXOCM7wEtb7QJz+F5QDgleSl7AAov4CXZErScPuZIWktNsi8tygSHj",
	"LE2NRR7djsgw7SmLiXLurG5LYJjmnJNY0hjOarYEhmpme5oAv6C5FRimWRLx31mtzcMhGkslLHKWCahj",
	"CzakSKX6M2aZVMGyPGKS5ymtUY6+CRVoR0vnrxw2eIl/iUzQRvVTEQlJZCHqhdxIXdUrIb08LlVUSuAZ",
	"Sf8Bvgd+xznjo1kClTaPIffNoqheFd01ghq2ChcVCHsqD1U2cpYDlxScJzUrJ/h2k6MjsAMhyBbO0F3/",
	"wh6/QSyVdJvCHTvcqtBZZkNT+FrHieepmwqdx0IyTrbwtQq3MEON311TezFxc75rLTkAv8YPNy89bhIJ",
	"Z58Uwvuo/iEMEx3QLhwxSyoNG8Z3ROKlSoO3b3CrQGXFFnhvsJis/1zrNPJfPNZokD0hnSQchLiKmksE",
	"+DDRL3iihGbeJc4GMfuRAb8yxv2m1dHSNe3aPOqLP5EFmmbi0TXsbJz6lKh20VVxPsQCysT5LGn7VoBh",
	"RZ4ykjzA9wKEp3yoUuaffHQNREoESYZqTXhhcuuRZoQfTHK5FfLvhtiuasbplqouobjXA1W1zCPQbNus",
	"BElX80lmVtZbq3VTs6w64YZVaFGpnMXr9ID+ApLKJ/RufY8XeA9c1Na9vrm9ua3iP4eM5BQv8dvqp0U1",
	"HlSQRfvXUZ4eIg1QdDTtoqwdTqGufQrpNsPxqvr939fr9LBq3ljZc6I9mX72N2AjElk9qvxyMnm8ub09",
	"18JbuUiPJ+UC/x4i7xsoqs5e7HYqDLSDiJjhuFzgLchuFDyA5BT2tix6PCAqBbpf3aAHkAXPRBUXJJYF",
	"SevwaIaXG7w4gfY9yGfE1ZqhXkWv3LGpNzk805uTaVr5eLS8B3mC8/2qEtGRfDJfsLpQuAivmaghvjPC",
	"dTKCkH+w5DDecGkWKN2EVwN42UvJ5ZUHTU+lt5647Bk8UMyBSEhGpO7PSiMiGXJQ8VEXHW1nQguRsf7O",
	"3VYOSxoHx9mVIxu7tiD5C8hz4jFJtrjByYEkJ+6PBO6D0nwKbXDpGBvcmVSh547wT3lCOhEeUh0iew9+",
	"RUK806+/bGJ4Tw+a/6iEnehjuYXBVHrCOTmElf4PVEg1vloLj8dtpdzWbPHqbDcv59wHLTpNmrSWTN6q",
	"L26Wg9hqFEzYppEFR5et6Gh8CO3P2ugP9sHssJSzgJtdZzZ49fTl58FhgpTw9GPb6XG7sa05sC6MCegs",
	"ysuL9WBv7jtHcpcZWWvRaaBsLZm8Ug88HOxmiUZiykptwdFlK0ppTdXFmqTNVJ0aT4Jg+CBj3JnnIGM8",
	"8uJ9NDFTBuO+tj8pDitdVohO2gvcpPP0Apu3cXuBrTmw8owJ6CwK2Iv1gsvVxY72yP4KOTDsV+YOwsuF",
	"v//LaXjlss+Kr69cZt2RC5eluJdK9xx1IJnOuepc6DQehRPqHgldT6m99sikOqp7abV32wNJtXbfc6FU",
	"exNOqL2ruJ5Os+7IZFqKe6m0P0MPpHKtX50PldqbIWNi48RPUWnWHX1KbBX3Uqm/uA+k8aN6bT4UKi/C",
	"6at8/inq6vVGpq1R2ktZc4PA2gq7Rn6qntvfKkmWICIEi6maq6hEP6h8QgSJHGK6obEZtBbhw+0nfZFh",
	"ohF3V6SS5oTLaMP47reESBI+5br3NSbfq1+86RYSWO3H6/H36t1w2DB+fri2Lhj1bXfaSj7NPkXX2OkP",
	"Wi5cgQo7aKkVTHvQ0sLRZUvVB+1D6JG4Nnpt3/sdmsrtq7M7ErdbdE9vew4cJkgJ7zGIcXrsYxCjObAu",
	"jAnoLMrLCx6DeHJfTQvRsb7EWAaUazWxfdS38YfR0dyUnIqKehybPw3azvL/AAAA//+oI2nqDDMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
